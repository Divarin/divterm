;
; File generated by cc65 v 2.19 - Git b993d8833
;
	.fopt		compiler,"cc65 v 2.19 - Git b993d8833"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_doesclrscrafterexit
	.import		_kbhit
	.import		_cgetc
	.import		_printf
	.import		_putchar
	.import		_atexit
	.import		_exit
	.import		_ser_static_stddrv
	.import		_ser_install
	.import		_ser_open
	.import		_ser_close
	.import		_ser_get
	.import		_ser_put
	.export		_termloop
	.export		_main

.segment	"RODATA"

S0005:
	.byte	$D3,$45,$52,$49,$41,$4C,$20,$D0,$4F,$52,$54,$3A,$20,$39,$36,$30
	.byte	$30,$2D,$38,$2D,$31,$2D,$CE,$20,$D2,$D4,$D3,$2F,$C3,$D4,$D3,$0D
	.byte	$D3,$49,$4D,$50,$4C,$45,$20,$D4,$45,$52,$4D,$3A,$20,$D0,$52,$45
	.byte	$53,$53,$20,$C5,$D3,$C3,$20,$46,$4F,$52,$20,$45,$58,$49,$54,$0D
	.byte	$00
S0002:
	.byte	$20,$2D,$2D,$20,$54,$45,$52,$4D,$20,$4C,$4F,$4F,$50,$20,$2D,$2D
	.byte	$0D,$00
S0003:
	.byte	$53,$45,$52,$A4,$49,$4E,$53,$54,$41,$4C,$4C,$00
S0001:
	.byte	$25,$53,$3A,$30,$58,$25,$30,$32,$58,$0D,$00
S0004:
	.byte	$53,$45,$52,$A4,$4F,$50,$45,$4E,$00

; ---------------------------------------------------------------
; void __near__ check (const char *msg, unsigned char err)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_check: near

.segment	"CODE"

	jsr     pusha
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$00
	jsr     booleq
	jeq     L0002
	jmp     L0001
L0002:	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	jsr     pushax
	ldy     #$06
	jsr     _printf
	jsr     _doesclrscrafterexit
	tax
	jeq     L0003
	jsr     _cgetc
L0003:	ldx     #$00
	lda     #$01
	jsr     _exit
L0001:	jsr     incsp3
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ termloop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_termloop: near

.segment	"CODE"

	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0004
L0002:	jsr     decsp1
	jsr     _kbhit
	tax
	jeq     L0009
	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     booleq
	jeq     L0006
	jsr     incsp1
	jmp     L0004
L0006:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$1B
	jsr     booleq
	jeq     L0007
	ldx     #$00
	lda     #$0D
	jsr     _putchar
	jsr     incsp1
	jmp     L0003
L0007:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _ser_put
	cmp     #$00
	jsr     booleq
	jeq     L0008
	jmp     L0009
L0008:	ldx     #$00
	lda     #$07
	jsr     _putchar
L0009:	lda     sp
	ldx     sp+1
	jsr     _ser_get
	cmp     #$00
	jsr     booleq
	jeq     L000B
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     boolne
	jne     L000C
L000B:	ldx     #$00
	lda     #$00
	jeq     L000D
L000C:	ldx     #$00
	lda     #$01
L000D:	jeq     L000A
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _putchar
L000A:	jsr     incsp1
L0004:	jmp     L0002
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	jsr     decsp5
	ldy     #$04
L0002:	lda     M0001,y
	sta     (sp),y
	dey
	bpl     L0002
	ldx     #$00
	lda     #$33
	sta     $0318
	ldx     #$00
	lda     #$FF
	sta     $0319
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	lda     #<(_ser_static_stddrv)
	ldx     #>(_ser_static_stddrv)
	jsr     _ser_install
	jsr     _check
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	lda     #$02
	jsr     leaa0sp
	jsr     _ser_open
	jsr     _check
	lda     #<(_ser_close)
	ldx     #>(_ser_close)
	jsr     _atexit
	lda     #<(_termloop)
	ldx     #>(_termloop)
	jsr     _atexit
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jsr     _termloop
	jsr     incsp5
	rts

.segment	"RODATA"

M0001:
	.byte	$0E
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01

.endproc

