;
; File generated by cc65 v 2.19 - Git b993d8833
;
	.fopt		compiler,"cc65 v 2.19 - Git b993d8833"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_printf
	.import		_putchar
	.import		_ser_load_driver
	.import		_ser_open
	.import		_ser_close
	.import		_ser_get
	.import		_ser_put
	.import		_videomode
	.import		_kbhit
	.import		_cgetc
	.import		_malloc
	.import		___heapmemavail
	.import		_exit
	.import		_set_c128_speed
	.export		_p300
	.export		_p1200
	.export		_p2400
	.export		_p4800
	.export		_p9600
	.export		_p19200
	.export		_p38400
	.export		_setBaud
	.export		_setVideo
	.export		_term
	.export		_currentbaud
	.export		_currentvideo
	.export		_key
	.export		_status
	.export		_err
	.export		_main

.segment	"DATA"

_p300:
	.byte	$06
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p1200:
	.byte	$08
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p2400:
	.byte	$0A
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p4800:
	.byte	$0C
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p9600:
	.byte	$0E
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p19200:
	.byte	$0F
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01
_p38400:
	.byte	$10
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$01

.segment	"RODATA"

S0006:
	.byte	$20,$2D,$2D,$20,$C4,$49,$56,$D4,$45,$52,$4D,$20,$D2,$45,$41,$44
	.byte	$59,$20,$2D,$2D,$0D,$C6,$31,$20,$3A,$20,$C2,$41,$55,$44,$2C,$20
	.byte	$C6,$33,$20,$3A,$20,$D6,$49,$44,$45,$4F,$0D,$00
S000A:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$D6,$49,$44,$45,$4F,$20
	.byte	$CD,$4F,$44,$45,$3A,$20,$D6,$C9,$C3,$20,$26,$20,$D6,$C4,$C3,$0D
	.byte	$00
S0008:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$D6,$49,$44,$45,$4F,$20
	.byte	$CD,$4F,$44,$45,$3A,$20,$D6,$C4,$C3,$0D,$00
S0011:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$31,$39,$32
	.byte	$30,$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S0012:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$33,$38,$34
	.byte	$30,$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S0009	:=	S0008+0
S000C:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$D6,$49,$44,$45,$4F,$20
	.byte	$CD,$4F,$44,$45,$3A,$20,$D6,$C9,$C3,$0D,$00
S000B	:=	S000C+0
S000F:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$34,$38,$30
	.byte	$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S000E:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$32,$34,$30
	.byte	$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S0010:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$39,$36,$30
	.byte	$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S000D:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$31,$32,$30
	.byte	$30,$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S0013:
	.byte	$0D,$0D,$D3,$45,$54,$54,$49,$4E,$47,$20,$54,$4F,$20,$33,$30,$30
	.byte	$20,$42,$41,$55,$44,$2E,$0D,$0D,$00
S0003:
	.byte	$C5,$52,$52,$4F,$52,$20,$4C,$4F,$41,$44,$49,$4E,$47,$20,$44,$52
	.byte	$49,$56,$45,$52,$21,$0D,$00
S0004:
	.byte	$C5,$52,$52,$4F,$52,$20,$4F,$50,$45,$4E,$49,$4E,$47,$20,$50,$4F
	.byte	$52,$54,$21,$0D,$00
S0014	:=	S0004+0
S0007:
	.byte	$0D,$0D,$C6,$52,$45,$45,$20,$4D,$45,$4D,$4F,$52,$59,$3A,$20,$25
	.byte	$55,$0D,$0D,$00
S0005:
	.byte	$C3,$4C,$4F,$53,$49,$4E,$47,$20,$D4,$45,$52,$4D,$49,$4E,$41,$4C
	.byte	$0D,$0D,$00
S0002:
	.byte	$43,$31,$32,$38,$2D,$53,$57,$4C,$49,$4E,$4B,$2E,$53,$45,$52,$00
S0001:
	.byte	$25,$43,$25,$43,$00

.segment	"BSS"

_currentbaud:
	.res	2,$00
_currentvideo:
	.res	2,$00
_key:
	.res	1,$00
_status:
	.res	2,$00
_err:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ setBaud (int baud)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setBaud: near

.segment	"CODE"

	jsr     pushax
	jsr     decsp5
	ldy     #$06
	jsr     ldaxysp
	jmp     L0002
L0002:	cpx     #$00
	jne     L000A
	cmp     #$01
	jeq     L0004
	cmp     #$02
	jeq     L0005
	cmp     #$03
	jeq     L0006
	cmp     #$04
	jeq     L0007
	cmp     #$05
	jeq     L0008
	cmp     #$06
	jeq     L0009
	jmp     L000A
	jmp     L000A
L0004:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p1200)
	ldx     #>(_p1200)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S000D)
	ldx     #>(S000D)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0005:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p2400)
	ldx     #>(_p2400)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S000E)
	ldx     #>(S000E)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0006:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p4800)
	ldx     #>(_p4800)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S000F)
	ldx     #>(S000F)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0007:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p9600)
	ldx     #>(_p9600)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S0010)
	ldx     #>(S0010)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0008:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p19200)
	ldx     #>(_p19200)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S0011)
	ldx     #>(S0011)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0009:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p38400)
	ldx     #>(_p38400)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S0012)
	ldx     #>(S0012)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L000A:	lda     sp
	ldx     sp+1
	jsr     pushax
	lda     #<(_p300)
	ldx     #>(_p300)
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     _memcpy
	lda     #<(S0013)
	ldx     #>(S0013)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0003:	ldy     #$06
	jsr     ldaxysp
	sta     _currentbaud
	stx     _currentbaud+1
	jsr     _ser_close
	lda     sp
	ldx     sp+1
	jsr     _ser_open
	sta     _err
	stx     _err+1
	lda     _err
	ldx     _err+1
	cpx     #$00
	bne     L000C
	cmp     #$00
L000C:	jsr     boolne
	jeq     L000B
	lda     #<(S0014)
	ldx     #>(S0014)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L000B:	jsr     incsp7
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ setVideo (int video)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_setVideo: near

.segment	"CODE"

	jsr     pushax
	ldy     #$01
	jsr     ldaxysp
	sta     _currentvideo
	stx     _currentvideo+1
	lda     _currentvideo
	ldx     _currentvideo+1
	jmp     L0002
L0002:	cpx     #$00
	jne     L0006
	cmp     #$01
	jeq     L0004
	cmp     #$02
	jeq     L0005
	jmp     L0006
	jmp     L0006
L0004:	lda     #<(S0008)
	ldx     #>(S0008)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$01
	jsr     _set_c128_speed
	ldx     #$00
	lda     #$05
	jsr     _videomode
	lda     #<(S0009)
	ldx     #>(S0009)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0005:	lda     #<(S000A)
	ldx     #>(S000A)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0006:	lda     #<(S000B)
	ldx     #>(S000B)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	ldx     #$00
	lda     #$00
	jsr     _set_c128_speed
	ldx     #$00
	lda     #$01
	jsr     _videomode
	lda     #<(S000C)
	ldx     #>(S000C)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0003
L0003:	jsr     incsp2
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ term (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_term: near

.segment	"CODE"

	ldy     #$0C
	jsr     subysp
	ldx     #$00
	lda     #$00
	ldy     #$0A
	jsr     staxysp
	ldx     #$00
	lda     #$00
	ldy     #$08
	jsr     staxysp
	ldx     #$0F
	lda     #$A0
	jsr     _malloc
	ldy     #$06
	jsr     staxysp
	ldy     #$07
	jsr     ldaxysp
	ldy     #$00
	jsr     staxysp
	ldx     #$00
	lda     #$00
	ldy     #$04
	jsr     staxysp
	lda     #<(S0006)
	ldx     #>(S0006)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jmp     L0004
L0002:	jsr     decsp1
	jsr     _kbhit
	tax
	jeq     L0005
	jsr     _cgetc
	ldy     #$00
	sta     (sp),y
	ldy     #$0C
	lda     (sp),y
	dey
	ora     (sp),y
	jeq     L0006
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L0007
L0007:	cmp     #$11
	jeq     L000A
	cmp     #$91
	jeq     L0009
	jmp     L0016
L0009:	jmp     L0008
L000A:	ldx     #$00
	lda     #$00
	ldy     #$09
	jsr     staxysp
L000B:	ldy     #$0A
	jsr     ldaxysp
	cmp     #$00
	txa
	sbc     #$01
	bvc     L000F
	eor     #$80
L000F:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0010
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     tosneax
	jne     L0011
L0010:	ldx     #$00
	lda     #$00
	jeq     L0012
L0011:	ldx     #$00
	lda     #$01
L0012:	jne     L000E
	jmp     L000C
L000E:	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldx     #$0F
	lda     #$A0
	jsr     tosaddax
	jsr     tosugeax
	jeq     L0013
	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	jsr     staxysp
L0013:	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     tosneax
	jeq     L000D
	ldy     #$04
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     _putchar
L000D:	ldy     #$09
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L000B
L000C:	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     toseqax
	jeq     L0015
	ldx     #$00
	lda     #$00
	ldy     #$0B
	jsr     staxysp
	ldx     #$00
	lda     #$0B
	sta     $D020
L0015:	jmp     L0008
L0016:	ldx     #$00
	lda     #$07
	sta     $D020
	jmp     L001A
L0017:	ldy     #$04
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     _putchar
	ldy     #$03
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldx     #$0F
	lda     #$A0
	jsr     tosaddax
	jsr     tosugeax
	jeq     L001A
	ldy     #$08
	jsr     ldaxysp
	ldy     #$03
	jsr     staxysp
L001A:	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldy     #$04
	jsr     ldaxysp
	jsr     tosneax
	jne     L0017
	ldx     #$00
	lda     #$00
	ldy     #$0B
	jsr     staxysp
	ldx     #$00
	lda     #$0B
	sta     $D020
	jmp     L0008
L0008:	jsr     incsp1
	jmp     L0004
L0006:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jmp     L001B
L001B:	cmp     #$03
	jeq     L001D
	cmp     #$0A
	jeq     L0020
	cmp     #$85
	jeq     L0021
	cmp     #$86
	jeq     L0023
	cmp     #$87
	jeq     L0025
	cmp     #$88
	jeq     L0027
	cmp     #$89
	jeq     L0022
	cmp     #$8A
	jeq     L0024
	cmp     #$8B
	jeq     L0026
	cmp     #$8C
	jeq     L0028
	jmp     L001C
L001D:	ldy     #$0C
	jsr     ldaxysp
	jsr     bnegax
	jeq     L001E
	ldx     #$00
	lda     #$01
	ldy     #$0B
	jsr     staxysp
	ldy     #$02
	jsr     ldaxysp
	ldy     #$03
	jsr     staxysp
	ldy     #$04
	jsr     ldaxysp
	jsr     pushax
	ldx     #$07
	lda     #$D0
	jsr     tossubax
	ldy     #$05
	jsr     staxysp
	ldy     #$06
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     tosultax
	jeq     L001F
	ldy     #$08
	jsr     ldaxysp
	jsr     pushax
	ldx     #$0F
	lda     #$A0
	jsr     tosaddax
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     tossubax
	jsr     tossubax
	ldy     #$05
	jsr     staxysp
L001F:	ldx     #$00
	lda     #$02
	sta     $D020
L001E:	jsr     incsp1
	jmp     L0004
L0020:	jsr     incsp1
	jmp     L0004
L0021:	lda     _currentbaud
	ldx     _currentbaud+1
	jsr     incax1
	jsr     pushax
	ldx     #$00
	lda     #$07
	jsr     tosmodax
	jsr     _setBaud
	jsr     incsp1
	jmp     L0004
L0022:	jmp     L001C
L0023:	lda     _currentvideo
	ldx     _currentvideo+1
	jsr     incax1
	jsr     pushax
	ldx     #$00
	lda     #$02
	jsr     tosmodax
	jsr     _setVideo
	jsr     incsp1
	jmp     L0004
L0024:	jmp     L001C
L0025:	lda     #<(S0007)
	ldx     #>(S0007)
	jsr     pushax
	jsr     ___heapmemavail
	jsr     pushax
	ldy     #$04
	jsr     _printf
	jsr     incsp1
	jmp     L0004
L0026:	jmp     L001C
L0027:	jmp     L001C
L0028:	jmp     L001C
L001C:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _ser_put
L0005:	lda     sp
	ldx     sp+1
	jsr     _ser_get
	cmp     #$00
	jsr     booleq
	jeq     L002A
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$0A
	jsr     boolne
	jne     L002B
L002A:	ldx     #$00
	lda     #$00
	jeq     L002C
L002B:	ldx     #$00
	lda     #$01
L002C:	jeq     L0030
	ldy     #$0C
	lda     (sp),y
	dey
	ora     (sp),y
	jeq     L002D
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$08
	jsr     ldaxysp
	jsr     tosneax
	jeq     L002E
	ldy     #$01
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$0A
	jsr     ldaxysp
	jsr     pushax
	ldx     #$0F
	lda     #$A0
	jsr     tosaddax
	jsr     tosugeax
	jeq     L002F
	ldy     #$08
	jsr     ldaxysp
	ldy     #$01
	jsr     staxysp
L002F:	ldy     #$02
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	jsr     staspidx
L002E:	jmp     L0030
L002D:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _putchar
L0030:	jsr     incsp1
L0004:	jmp     L0002
	ldy     #$0C
	jsr     addysp
	rts

.endproc

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldx     #$00
	lda     #$04
	sta     _currentbaud
	stx     _currentbaud+1
	ldx     #$00
	lda     #$00
	sta     _currentvideo
	stx     _currentvideo+1
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     pushax
	ldx     #$00
	lda     #$93
	jsr     pushax
	ldx     #$00
	lda     #$05
	jsr     pushax
	ldy     #$06
	jsr     _printf
	ldx     #$00
	lda     #$0B
	sta     $D020
	ldx     #$00
	lda     #$00
	sta     $D021
	ldx     #$00
	lda     #$33
	sta     $0318
	ldx     #$00
	lda     #$FF
	sta     $0319
	lda     #<(S0002)
	ldx     #>(S0002)
	jsr     _ser_load_driver
	sta     _err
	stx     _err+1
	lda     _err
	ldx     _err+1
	cpx     #$00
	bne     L0003
	cmp     #$00
L0003:	jsr     boolne
	jeq     L0002
	lda     #<(S0003)
	ldx     #>(S0003)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0002:	lda     #<(_p9600)
	ldx     #>(_p9600)
	jsr     _ser_open
	sta     _err
	stx     _err+1
	lda     _err
	ldx     _err+1
	cpx     #$00
	bne     L0005
	cmp     #$00
L0005:	jsr     boolne
	jeq     L0004
	lda     #<(S0004)
	ldx     #>(S0004)
	jsr     pushax
	ldy     #$02
	jsr     _printf
L0004:	jsr     _term
	lda     #<(S0005)
	ldx     #>(S0005)
	jsr     pushax
	ldy     #$02
	jsr     _printf
	jsr     _cgetc
	jsr     _ser_close
	ldx     #$00
	lda     #$00
	jsr     _exit
	ldx     #$00
	lda     #$00
	jmp     L0001
L0001:	rts

.endproc

