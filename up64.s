;
; File generated by cc65 v 2.19 - Git b993d8833
;
	.fopt		compiler,"cc65 v 2.19 - Git b993d8833"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_cbm_open
	.import		_cbm_close
	.import		_cbm_read
	.import		_cbm_write
	.import		_getchar
	.import		_putchar
	.import		_puts
	.import		_malloc
	.export		_main

.segment	"RODATA"

S0001:
	.byte	$D5,$4E,$41,$42,$4C,$45,$20,$54,$4F,$20,$4F,$50,$45,$4E,$20,$4D
	.byte	$4F,$44,$45,$4D,$2E,$00

; ---------------------------------------------------------------
; int __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

	ldy     #$0B
	jsr     subysp
	ldx     #$00
	lda     #$06
	ldy     #$01
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     #$00
	ldy     #$03
	sta     (sp),y
	ldx     #$00
	lda     #$01
	jsr     _malloc
	ldy     #$09
	jsr     staxysp
	ldx     #$00
	lda     #$01
	jsr     _malloc
	ldy     #$07
	jsr     staxysp
	ldx     #$00
	lda     #$02
	jsr     pusha
	ldx     #$00
	lda     #$02
	jsr     pusha
	ldx     #$00
	lda     #$00
	jsr     pusha
	lda     #$04
	jsr     leaa0sp
	jsr     _cbm_open
	jsr     bnega
	jeq     L0002
	lda     #<(S0001)
	ldx     #>(S0001)
	jsr     _puts
L0002:	ldx     #$00
	lda     #$02
	jsr     pusha
	ldy     #$0B
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     _cbm_read
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0007
	eor     #$80
L0007:	asl     a
	lda     #$00
	ldx     #$00
	rol     a
	jeq     L0006
	ldy     #$0A
	jsr     ldaxysp
	ldy     #$00
	jsr     ldauidx
	jsr     _putchar
L0006:	jsr     _getchar
	ldx     #$00
	ldy     #$00
	sta     (sp),y
	ldy     #$00
	lda     (sp),y
	jeq     L0008
	ldy     #$00
	ldx     #$00
	lda     (sp),y
	jsr     _putchar
	ldy     #$08
	jsr     ldaxysp
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	ldy     #$00
	jsr     staspidx
	ldx     #$00
	lda     #$02
	jsr     pusha
	ldy     #$09
	jsr     ldaxysp
	jsr     pushax
	ldx     #$00
	lda     #$01
	jsr     _cbm_write
L0008:	ldy     #$00
	ldx     #$00
	lda     (sp),y
	cmp     #$2E
	jsr     boolne
	jne     L0002
	ldx     #$00
	lda     #$02
	jsr     _cbm_close
	ldx     #$00
	lda     #$00
	ldy     #$0B
	jsr     addysp
	rts

.endproc

